import React, { useEffect, useRef, useState } from 'react';
import Button from '../../Components/Button/Button'
import axios from 'axios';

const Record = () => {
  const videoRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const [isRecording, setIsRecording] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [recordedChunks, setRecordedChunks] = useState([]);
  const [uploadButtonVisible, setUploadButtonVisible] = useState(false);
  const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);


  useEffect(() => {
    if (uploadButtonVisible && recordedChunks.length > 0) {
      uploadVideo();
    }
  }, [uploadButtonVisible, recordedChunks]);  

  const startRecording = () => {
    if (mediaRecorderRef.current) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      setIsPaused(false);
      mediaRecorderRef.current = null;
    }

    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((stream) => {
        videoRef.current.srcObject = stream;

        mediaRecorderRef.current = new MediaRecorder(stream);
        const chunks = [];

        mediaRecorderRef.current.ondataavailable = (e) => {
          if (e.data.size > 0) {
            chunks.push(e.data);
          }
        };

        mediaRecorderRef.current.onstop = () => {
          const blob = new Blob(chunks, { type: 'video/mp4' });
          const url = URL.createObjectURL(blob);
          setRecordedChunks([...chunks]);
          setRecordedVideoUrl(url);
        };

        mediaRecorderRef.current.start();
        setIsRecording(true);
      })
      .catch((error) => {
        console.error('Error accessing media devices:', error);
      });
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      setIsPaused(false);
      mediaRecorderRef.current = null;
      videoRef.current.srcObject = null;
    }
  };

  const pauseRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.pause();
      setIsPaused(true);
    }
  };

  const resumeRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.resume();
      setIsPaused(false);
    }
  };

  const downloadVideo = (url) => {
    const a = document.createElement('a');
    a.href = url;
    a.download = 'recorded-video.mp4';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  };

  const uploadVideo = async () => {
    if (recordedChunks.length > 0) {
      const blob = new Blob(recordedChunks, { type: 'video/mp4' });
      console.log('Blob size:', blob.size);
      const formData = new FormData();
      formData.append('video', blob);
    
      try {
        const response = await axios.post('http://localhost:5000/api/upload_video', formData, {headers: {'Content-Type': 'multipart/form-data', }, });
        console.log(response.data);
      } catch (error) {
        console.log('Error uploading video', error);
      }
    }
  };    

  return (
    <div>
      <video ref={videoRef} width="640" height="480" autoPlay controls muted />
      <div>
        {isRecording ? (
          <>
            <button onClick={stopRecording}>Stop Recording</button>
            {isPaused ? (
              <button onClick={resumeRecording}>Resume Recording</button>
            ) : (
              <button onClick={pauseRecording}>Pause Recording</button>
            )}
          </>
        ) : (
          <>
            <button onClick={startRecording}>Start Recording</button>
            {recordedChunks.length > 0 && (
              <button onClick={downloadVideo}>Download Recording</button>
            )}
            {recordedChunks.length > 0 && (
              <div className="container-fluid featureButton"><Button message={"Upload"}
              onClick={uploadVideo} link={"feedback"}></Button></div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default Record;